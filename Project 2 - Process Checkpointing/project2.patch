From 58bb6c824e1cc00a29d24b2ac6878533bac756d5 Mon Sep 17 00:00:00 2001
From: Milin <milinbhade1214@gmail.com>
Date: Fri, 31 Mar 2023 20:12:13 +0530
Subject: [PATCH 1/2] OS Assignment 2

Signed-off-by: Milin <milinbhade1214@gmail.com>
---
 Makefile                               |   2 +-
 arch/x86/entry/syscalls/syscall_64.tbl |   1 +
 include/linux/mm_types.h               |   7 ++
 include/linux/sched.h                  |   3 +-
 include/linux/syscalls.h               |   4 +
 mmcontext/Makefile                     |   1 +
 mmcontext/mmcontext.c                  | 120 +++++++++++++++++++++++++
 7 files changed, 136 insertions(+), 2 deletions(-)
 create mode 100644 mmcontext/Makefile
 create mode 100644 mmcontext/mmcontext.c

diff --git a/Makefile b/Makefile
index b978809a1..a7c396b0f 100644
--- a/Makefile
+++ b/Makefile
@@ -1101,7 +1101,7 @@ export MODORDER := $(extmod_prefix)modules.order
 export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/
+core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ mmcontext/
 core-$(CONFIG_BLOCK)	+= block/
 core-$(CONFIG_IO_URING)	+= io_uring/
 
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608..36fd35346 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,6 +372,7 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
+451	common	mmcontext		sys_mmcontext
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index cf97f3884..d68036256 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -400,6 +400,13 @@ struct anon_vma_name {
  * space that has a special rule for the page-fault handlers (ie a shared
  * library, the executable area etc).
  */
+
+struct mmcontext{
+	struct page * data;
+	unsigned long addr;
+	struct list_head nextpointer;
+};
+
 struct vm_area_struct {
 	/* The first cache line has the info for VMA tree walking. */
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 8d82d6d32..b11d652c8 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1511,7 +1511,8 @@ struct task_struct {
 	 */
 	union rv_task_monitor		rv[RV_PER_TASK_MONITORS];
 #endif
-
+	struct list_head context;
+	int context_saved;
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..1db3e1e80 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1385,4 +1385,8 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+
+
+asmlinkage long sys_mmcontext(int i);
+
 #endif
diff --git a/mmcontext/Makefile b/mmcontext/Makefile
new file mode 100644
index 000000000..5f24d319c
--- /dev/null
+++ b/mmcontext/Makefile
@@ -0,0 +1 @@
+obj-y := mmcontext.o
diff --git a/mmcontext/mmcontext.c b/mmcontext/mmcontext.c
new file mode 100644
index 000000000..d4b7a1931
--- /dev/null
+++ b/mmcontext/mmcontext.c
@@ -0,0 +1,120 @@
+#include <linux/kernel.h>
+#include <linux/uaccess.h>
+#include <linux/mm.h>
+#include <linux/syscalls.h>
+#include <linux/slab.h> 
+#include <linux/uio.h>
+// #include <asm/uaccess.h>
+
+
+#define PAGE_SIZE_NR 10
+
+// To check if Physical Page exists for given virtual address
+bool pte_exist(signed long address){
+    pud_t * pud;
+    p4d_t *p4d;
+    pgd_t *pgd;
+    pmd_t *pmd;
+    pte_t *pte;
+
+    pgd = pgd_offset(current->mm,address);
+    if (!pgd_present(*pgd))
+        return 0;
+
+    p4d = p4d_offset(pgd, address);
+    if (!p4d_present(*p4d))
+        return 0;
+
+    pud = pud_offset(p4d, address);
+    if (!pud_present(*pud))
+        return 0;
+
+    pmd = pmd_offset(pud, address);
+    if (!pmd_present(*pmd))
+        return 0;
+
+    pte = pte_offset_kernel(pmd, address);
+    if (!pte_present(*pte))
+    return 0;
+
+    return 1;
+}
+
+
+int page_anon_save(struct vm_area_struct *vm){
+
+    struct mmcontext *new_context;
+    //void *new_page_addr = NULL;
+    struct page *new_page = NULL;
+    unsigned long n;
+    
+
+    for(unsigned long i = vm->vm_start; i <= vm->vm_end; i+= 4096)
+    {
+        if(pte_exist(i))
+        {
+            new_context = kmalloc(sizeof(struct mmcontext),GFP_KERNEL);
+            if (!new_context)
+                return -ENOMEM;
+            new_page = alloc_page(GFP_KERNEL);
+            if (!new_page) {
+                kfree(new_context);
+                return -ENOMEM;  // out of memory
+            }
+            n = copy_from_user(page_address(new_page),(void*) i, 4096);
+            if(n != 0)
+            {
+                return -ENOMEM;
+            }
+            new_context->addr = i;
+            new_context->data = new_page;
+            list_add_tail(&new_context->nextpointer,&current->context);
+        }
+    }
+    return 0;
+}
+
+
+int save_context(void){
+    struct vm_area_struct *vmlist = current->mm->mmap;
+    int ret;
+    INIT_LIST_HEAD(&current->context);
+    current->context_saved = 1;
+    while(vmlist->vm_next != NULL){
+        if(!(vmlist->vm_flags & VM_STACK || vmlist->vm_file)){
+            //printk("This is a anon page\n");
+            ret = page_anon_save(vmlist);
+            if(ret){
+                return ret;
+            }
+        }
+        vmlist = vmlist->vm_next;
+    }
+    return 0;
+}
+
+int restore_context(void){
+    return 0;
+}
+
+
+
+SYSCALL_DEFINE1(mmcontext, int, i) {
+    int ret;
+    if(i == 0){
+        if (current->context_saved) {
+            return -EINVAL;  // context already saved
+        }
+
+        ret = save_context();
+        if (list_empty(&current->context)) {
+            return -EFAULT;  // no valid addresses found
+        }
+    }
+    else{
+        ret = restore_context();
+        current->context_saved = 0;
+    }
+    return ret
+
+}
-- 
2.34.1


From 2814283923da6403f628357d40bf507631486bde Mon Sep 17 00:00:00 2001
From: Milin <milinbhade1214@gmail.com>
Date: Mon, 10 Apr 2023 22:10:14 +0530
Subject: [PATCH 2/2] Adds files required for submission

---
 include/linux/sched.h |   1 +
 kernel/sched/core.c   |  15 ++++
 mm/memory.c           |  30 ++++++++
 mmcontext/mmcontext.c | 160 ++++++++++++++++++++++++++++++++++--------
 4 files changed, 175 insertions(+), 31 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index b11d652c8..aac34f47e 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1513,6 +1513,7 @@ struct task_struct {
 #endif
 	struct list_head context;
 	int context_saved;
+	// int save_called;
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index cb9d8ae7c..e4454b153 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4337,6 +4337,8 @@ static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
+	INIT_LIST_HEAD(&(p->context));
+	p->context_saved = 0;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	p->se.cfs_rq			= NULL;
@@ -6503,9 +6505,22 @@ static void __sched notrace __schedule(unsigned int sched_mode)
 
 void __noreturn do_task_dead(void)
 {
+	struct list_head *context = &current->context;
+	struct mmcontext *orig_context = NULL;
 	/* Causes final put_task_struct in finish_task_switch(): */
 	set_special_state(TASK_DEAD);
 
+	// Freeing context memory if saved
+	if(current->context_saved == 1){
+		while(context->next != context) // empty context
+    	{
+			orig_context = list_entry(context->next,struct mmcontext,nextpointer);
+			list_del(context->next);
+			__free_pages(orig_context->data,0);
+			kfree(orig_context);
+    	}
+	}
+
 	/* Tell freezer to ignore us: */
 	current->flags |= PF_NOFREEZE;
 
diff --git a/mm/memory.c b/mm/memory.c
index a0fdaa740..0470c5070 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -3050,6 +3050,9 @@ static inline void wp_page_reuse(struct vm_fault *vmf)
 	struct vm_area_struct *vma = vmf->vma;
 	struct page *page = vmf->page;
 	pte_t entry;
+	struct mmcontext *new_context;
+	struct page *new_page = NULL;
+	unsigned long n;
 
 	VM_BUG_ON(!(vmf->flags & FAULT_FLAG_WRITE));
 	VM_BUG_ON(page && PageAnon(page) && !PageAnonExclusive(page));
@@ -3062,6 +3065,7 @@ static inline void wp_page_reuse(struct vm_fault *vmf)
 	if (page)
 		page_cpupid_xchg_last(page, (1 << LAST_CPUPID_SHIFT) - 1);
 
+
 	flush_cache_page(vma, vmf->address, pte_pfn(vmf->orig_pte));
 	entry = pte_mkyoung(vmf->orig_pte);
 	entry = maybe_mkwrite(pte_mkdirty(entry), vma);
@@ -3069,6 +3073,32 @@ static inline void wp_page_reuse(struct vm_fault *vmf)
 		update_mmu_cache(vma, vmf->address, vmf->pte);
 	pte_unmap_unlock(vmf->pte, vmf->ptl);
 	count_vm_event(PGREUSE);
+
+	if((current->context_saved == 1) && !(vma->vm_flags & VM_STACK || vma->vm_file)){
+		// printk("Page fault addr: %lx\n", vmf->real_address);
+		// printk("Copied Page address: %lx\n", (unsigned long) page);
+		new_context = kmalloc(sizeof(struct mmcontext),GFP_KERNEL);
+		// if (!new_context)
+		// 	return -ENOMEM;
+		new_page = alloc_pages(GFP_KERNEL, 0);
+		// if (!new_page) {
+		// 	kfree(new_context);
+		// 	return -ENOMEM;  // out of memory
+		// }
+		n = __copy_from_user(page_address(new_page),(void*) page_address(page), 4096);
+		// if(n == 0)
+		// {   
+		//     printk("Page copied successfully\n");
+		//     // return -ENOMEM;
+		// }
+		// if(n != 0){
+		// 	printk("Page not copied successfully\n");
+		// }
+		new_context->addr = (unsigned long) page_address(page);
+		new_context->data = new_page;
+		list_add_tail(&new_context->nextpointer,&current->context);
+		// printk("Page added to context on COW\n");
+	}
 }
 
 /*
diff --git a/mmcontext/mmcontext.c b/mmcontext/mmcontext.c
index d4b7a1931..de9362dfc 100644
--- a/mmcontext/mmcontext.c
+++ b/mmcontext/mmcontext.c
@@ -10,7 +10,37 @@
 #define PAGE_SIZE_NR 10
 
 // To check if Physical Page exists for given virtual address
-bool pte_exist(signed long address){
+// bool pte_exist(signed long address){
+//     pud_t * pud;
+//     p4d_t *p4d;
+//     pgd_t *pgd;
+//     pmd_t *pmd;
+//     pte_t *pte;
+
+//     pgd = pgd_offset(current->mm,address);
+//     if (!pgd_present(*pgd))
+//         return 0;
+
+//     p4d = p4d_offset(pgd, address);
+//     if (!p4d_present(*p4d))
+//         return 0;
+
+//     pud = pud_offset(p4d, address);
+//     if (!pud_present(*pud))
+//         return 0;
+
+//     pmd = pmd_offset(pud, address);
+//     if (!pmd_present(*pmd))
+//         return 0;
+
+//     pte = pte_offset_kernel(pmd, address);
+//     if (!pte_present(*pte))
+//     return 0;
+
+//     return 1;
+// }
+
+pte_t* pte_entry(signed long address){
     pud_t * pud;
     p4d_t *p4d;
     pgd_t *pgd;
@@ -19,62 +49,105 @@ bool pte_exist(signed long address){
 
     pgd = pgd_offset(current->mm,address);
     if (!pgd_present(*pgd))
-        return 0;
+        return NULL;
 
     p4d = p4d_offset(pgd, address);
     if (!p4d_present(*p4d))
-        return 0;
+        return NULL;
 
     pud = pud_offset(p4d, address);
     if (!pud_present(*pud))
-        return 0;
+        return NULL;
 
     pmd = pmd_offset(pud, address);
     if (!pmd_present(*pmd))
-        return 0;
+        return NULL;
 
     pte = pte_offset_kernel(pmd, address);
     if (!pte_present(*pte))
-    return 0;
+    return NULL;
 
-    return 1;
+    return pte;
 }
 
 
+// int page_anon_save(struct vm_area_struct *vm){
+
+//     struct mmcontext *new_context;
+//     //void *new_page_addr = NULL;
+//     struct page *new_page = NULL;
+//     unsigned long n;
+    
+
+//     for(unsigned long i = vm->vm_start; i <= vm->vm_end; i+= 4096)
+//     {
+//         if(pte_exist(i))
+//         {
+//             new_context = kmalloc(sizeof(struct mmcontext),GFP_KERNEL);
+//             if (!new_context)
+//                 return -ENOMEM;
+//             new_page = alloc_page(GFP_KERNEL);
+//             if (!new_page) {
+//                 kfree(new_context);
+//                 return -ENOMEM;  // out of memory
+//             }
+//             n = copy_from_user(page_address(new_page),(void*) i, 4096);
+//             // if(n == 0)
+//             // {   
+//             //     printk("Page copied successfully\n");
+//             //     // return -ENOMEM;
+//             // }
+//             if(n != 0){
+//                 return -ENOMEM;
+//             }
+//             new_context->addr = i;
+//             new_context->data = new_page;
+//             list_add_tail(&new_context->nextpointer,&current->context);
+//         }
+//     }
+//     return 0;
+// }
+
+
+
 int page_anon_save(struct vm_area_struct *vm){
 
-    struct mmcontext *new_context;
+    // struct mmcontext *new_context;
     //void *new_page_addr = NULL;
-    struct page *new_page = NULL;
-    unsigned long n;
+    // struct page *new_page = NULL;
+    // unsigned long n;
     
 
     for(unsigned long i = vm->vm_start; i <= vm->vm_end; i+= 4096)
     {
-        if(pte_exist(i))
+        pte_t *addr = pte_entry(i); 
+        if(addr != NULL)
         {
-            new_context = kmalloc(sizeof(struct mmcontext),GFP_KERNEL);
-            if (!new_context)
-                return -ENOMEM;
-            new_page = alloc_page(GFP_KERNEL);
-            if (!new_page) {
-                kfree(new_context);
-                return -ENOMEM;  // out of memory
-            }
-            n = copy_from_user(page_address(new_page),(void*) i, 4096);
-            if(n != 0)
-            {
-                return -ENOMEM;
-            }
-            new_context->addr = i;
-            new_context->data = new_page;
-            list_add_tail(&new_context->nextpointer,&current->context);
+            set_pte_at(current->mm, i, addr, pte_wrprotect(*addr));
         }
     }
     return 0;
 }
 
 
+// int save_context(void){
+//     struct vm_area_struct *vmlist = current->mm->mmap;
+//     int ret;
+//     INIT_LIST_HEAD(&current->context);
+//     current->context_saved = 1;
+//     while(vmlist->vm_next != NULL){
+//         if(!(vmlist->vm_flags & VM_STACK || vmlist->vm_file)){
+//             //printk("This is a anon page\n");
+//             ret = page_anon_save(vmlist);
+//             if(ret){
+//                 return ret;
+//             }
+//         }
+//         vmlist = vmlist->vm_next;
+//     }
+//     return 0;
+// }
+
 int save_context(void){
     struct vm_area_struct *vmlist = current->mm->mmap;
     int ret;
@@ -90,10 +163,35 @@ int save_context(void){
         }
         vmlist = vmlist->vm_next;
     }
+    // printk("Reached Here\n");
     return 0;
 }
 
+
 int restore_context(void){
+    struct list_head *context = &current->context;
+    struct mmcontext *orig_context = NULL;
+    void *new_addr = NULL;
+    unsigned long n;
+
+    // printk("Restore context called\n");
+    while(context->next != context) // empty context
+    {
+        // printk("Context is not empty\n");
+        orig_context = list_entry(context->next,struct mmcontext,nextpointer);
+        list_del(context->next);
+        new_addr = page_address(orig_context->data);
+        // new_addr = 
+        // printk("Restored at %lx\n", orig_context->addr);
+        n = __copy_to_user((void*)orig_context->addr,new_addr, 4096);
+
+        // if(n != 0)
+        // {
+        //     printk("Not restored Properly\n");
+        // }
+        __free_pages(orig_context->data,0);
+        kfree(orig_context);
+    }
     return 0;
 }
 
@@ -107,14 +205,14 @@ SYSCALL_DEFINE1(mmcontext, int, i) {
         }
 
         ret = save_context();
-        if (list_empty(&current->context)) {
-            return -EFAULT;  // no valid addresses found
-        }
+        // if (list_empty(&current->context)) {
+        //     return -EFAULT;  // no valid addresses found
+        // }
     }
     else{
         ret = restore_context();
         current->context_saved = 0;
     }
-    return ret
+    return 0;
 
 }
-- 
2.34.1


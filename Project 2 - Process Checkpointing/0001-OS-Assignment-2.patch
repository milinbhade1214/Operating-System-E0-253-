From 58bb6c824e1cc00a29d24b2ac6878533bac756d5 Mon Sep 17 00:00:00 2001
From: Milin <milinbhade1214@gmail.com>
Date: Fri, 31 Mar 2023 20:12:13 +0530
Subject: [PATCH] OS Assignment 2

Signed-off-by: Milin <milinbhade1214@gmail.com>
---
 Makefile                               |   2 +-
 arch/x86/entry/syscalls/syscall_64.tbl |   1 +
 include/linux/mm_types.h               |   7 ++
 include/linux/sched.h                  |   3 +-
 include/linux/syscalls.h               |   4 +
 mmcontext/Makefile                     |   1 +
 mmcontext/mmcontext.c                  | 120 +++++++++++++++++++++++++
 7 files changed, 136 insertions(+), 2 deletions(-)
 create mode 100644 mmcontext/Makefile
 create mode 100644 mmcontext/mmcontext.c

diff --git a/Makefile b/Makefile
index b978809a1..a7c396b0f 100644
--- a/Makefile
+++ b/Makefile
@@ -1101,7 +1101,7 @@ export MODORDER := $(extmod_prefix)modules.order
 export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/
+core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ mmcontext/
 core-$(CONFIG_BLOCK)	+= block/
 core-$(CONFIG_IO_URING)	+= io_uring/
 
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608..36fd35346 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,6 +372,7 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
+451	common	mmcontext		sys_mmcontext
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index cf97f3884..d68036256 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -400,6 +400,13 @@ struct anon_vma_name {
  * space that has a special rule for the page-fault handlers (ie a shared
  * library, the executable area etc).
  */
+
+struct mmcontext{
+	struct page * data;
+	unsigned long addr;
+	struct list_head nextpointer;
+};
+
 struct vm_area_struct {
 	/* The first cache line has the info for VMA tree walking. */
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 8d82d6d32..b11d652c8 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1511,7 +1511,8 @@ struct task_struct {
 	 */
 	union rv_task_monitor		rv[RV_PER_TASK_MONITORS];
 #endif
-
+	struct list_head context;
+	int context_saved;
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..1db3e1e80 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1385,4 +1385,8 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+
+
+asmlinkage long sys_mmcontext(int i);
+
 #endif
diff --git a/mmcontext/Makefile b/mmcontext/Makefile
new file mode 100644
index 000000000..5f24d319c
--- /dev/null
+++ b/mmcontext/Makefile
@@ -0,0 +1 @@
+obj-y := mmcontext.o
diff --git a/mmcontext/mmcontext.c b/mmcontext/mmcontext.c
new file mode 100644
index 000000000..d4b7a1931
--- /dev/null
+++ b/mmcontext/mmcontext.c
@@ -0,0 +1,120 @@
+#include <linux/kernel.h>
+#include <linux/uaccess.h>
+#include <linux/mm.h>
+#include <linux/syscalls.h>
+#include <linux/slab.h> 
+#include <linux/uio.h>
+// #include <asm/uaccess.h>
+
+
+#define PAGE_SIZE_NR 10
+
+// To check if Physical Page exists for given virtual address
+bool pte_exist(signed long address){
+    pud_t * pud;
+    p4d_t *p4d;
+    pgd_t *pgd;
+    pmd_t *pmd;
+    pte_t *pte;
+
+    pgd = pgd_offset(current->mm,address);
+    if (!pgd_present(*pgd))
+        return 0;
+
+    p4d = p4d_offset(pgd, address);
+    if (!p4d_present(*p4d))
+        return 0;
+
+    pud = pud_offset(p4d, address);
+    if (!pud_present(*pud))
+        return 0;
+
+    pmd = pmd_offset(pud, address);
+    if (!pmd_present(*pmd))
+        return 0;
+
+    pte = pte_offset_kernel(pmd, address);
+    if (!pte_present(*pte))
+    return 0;
+
+    return 1;
+}
+
+
+int page_anon_save(struct vm_area_struct *vm){
+
+    struct mmcontext *new_context;
+    //void *new_page_addr = NULL;
+    struct page *new_page = NULL;
+    unsigned long n;
+    
+
+    for(unsigned long i = vm->vm_start; i <= vm->vm_end; i+= 4096)
+    {
+        if(pte_exist(i))
+        {
+            new_context = kmalloc(sizeof(struct mmcontext),GFP_KERNEL);
+            if (!new_context)
+                return -ENOMEM;
+            new_page = alloc_page(GFP_KERNEL);
+            if (!new_page) {
+                kfree(new_context);
+                return -ENOMEM;  // out of memory
+            }
+            n = copy_from_user(page_address(new_page),(void*) i, 4096);
+            if(n != 0)
+            {
+                return -ENOMEM;
+            }
+            new_context->addr = i;
+            new_context->data = new_page;
+            list_add_tail(&new_context->nextpointer,&current->context);
+        }
+    }
+    return 0;
+}
+
+
+int save_context(void){
+    struct vm_area_struct *vmlist = current->mm->mmap;
+    int ret;
+    INIT_LIST_HEAD(&current->context);
+    current->context_saved = 1;
+    while(vmlist->vm_next != NULL){
+        if(!(vmlist->vm_flags & VM_STACK || vmlist->vm_file)){
+            //printk("This is a anon page\n");
+            ret = page_anon_save(vmlist);
+            if(ret){
+                return ret;
+            }
+        }
+        vmlist = vmlist->vm_next;
+    }
+    return 0;
+}
+
+int restore_context(void){
+    return 0;
+}
+
+
+
+SYSCALL_DEFINE1(mmcontext, int, i) {
+    int ret;
+    if(i == 0){
+        if (current->context_saved) {
+            return -EINVAL;  // context already saved
+        }
+
+        ret = save_context();
+        if (list_empty(&current->context)) {
+            return -EFAULT;  // no valid addresses found
+        }
+    }
+    else{
+        ret = restore_context();
+        current->context_saved = 0;
+    }
+    return ret
+
+}
-- 
2.34.1

